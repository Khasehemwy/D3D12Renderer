//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbPerObject
// {
//
//   float4x4 gWorld;                   // Offset:    0 Size:    64
//   float4x4 gViewProj;                // Offset:   64 Size:    64
//   float3 gEyePosW;                   // Offset:  128 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbPerObject                       cbuffer      NA          NA            cb0      1 
//
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0 QUADEDGE   float       
// SV_TessFactor            1   x           1 QUADEDGE   float       
// SV_TessFactor            2   x           2 QUADEDGE   float       
// SV_TessFactor            3   x           3 QUADEDGE   float       
// SV_InsideTessFactor      0   x           4  QUADINT   float       
// SV_InsideTessFactor      1   x           5  QUADINT   float       
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   x z 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
// Tessellation Domain   # of control points
// -------------------- --------------------
// Quadrilateral                           4
//
ds_5_0
dcl_input_control_point_count 4
dcl_tessellator_domain domain_quad
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[8], immediateIndexed
dcl_input vDomain.xy
dcl_input vicp[4][0].xz
dcl_output_siv o0.xyzw, position
dcl_temps 2
//
// Initial variable locations:
//   vpc0.x <- patchTess.EdgeTess[0]; 
//   vpc1.x <- patchTess.EdgeTess[1]; 
//   vpc2.x <- patchTess.EdgeTess[2]; 
//   vpc3.x <- patchTess.EdgeTess[3]; 
//   vpc4.x <- patchTess.InsideTess[0]; 
//   vpc5.x <- patchTess.InsideTess[1]; 
//   vDomain.x <- uv.x; vDomain.y <- uv.y; 
//   o0.x <- <DS return value>.PosH.x; o0.y <- <DS return value>.PosH.y; o0.z <- <DS return value>.PosH.z; o0.w <- <DS return value>.PosH.w; 
//   vicp[0][0].x <- quad[0].PosL.x; vicp[0][0].y <- quad[0].PosL.y; vicp[0][0].z <- quad[0].PosL.z; 
//   vicp[1][0].x <- quad[1].PosL.x; vicp[1][0].y <- quad[1].PosL.y; vicp[1][0].z <- quad[1].PosL.z; 
//   vicp[2][0].x <- quad[2].PosL.x; vicp[2][0].y <- quad[2].PosL.y; vicp[2][0].z <- quad[2].PosL.z; 
//   vicp[3][0].x <- quad[3].PosL.x; vicp[3][0].y <- quad[3].PosL.y; vicp[3][0].z <- quad[3].PosL.z
//
#line 108 "E:\Projects\Project1\Project1\Shaders\Tessellation\shader.hlsl"
mov r0.xy, -vicp[0][0].xzxx
add r0.xy, r0.xyxx, vicp[1][0].xzxx
mul r0.xy, r0.xyxx, vDomain.xxxx
add r0.xy, r0.xyxx, vicp[0][0].xzxx  // r0.x <- v1.x; r0.y <- v1.z

#line 109
mov r0.zw, -vicp[2][0].xxxz
add r0.zw, r0.zzzw, vicp[3][0].xxxz
mul r0.zw, r0.zzzw, vDomain.xxxx
add r0.zw, r0.zzzw, vicp[2][0].xxxz  // r0.z <- v2.x; r0.w <- v2.z

#line 110
mov r1.xy, -r0.xyxx
add r0.zw, r0.zzzw, r1.xxxy
mul r0.zw, r0.zzzw, vDomain.yyyy
add r0.xz, r0.zzwz, r0.xxyx  // r0.x <- p.x; r0.z <- p.z

#line 113
sincos r1.x, null, r0.x
mul r1.x, r0.z, r1.x
sincos null, r1.y, r0.z
mul r1.y, r0.x, r1.y
add r1.x, r1.y, r1.x
mul r0.y, r1.x, l(0.300000)  // r0.y <- p.y

#line 115
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- posW.x
dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- posW.y
dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- posW.z
dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- posW.w

#line 116
dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- dout.PosH.x
dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- dout.PosH.y
dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- dout.PosH.z
dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- dout.PosH.w

#line 118
mov o0.xyzw, r0.xyzw
ret 
// Approximately 29 instruction slots used
